{%- from "openvpn/map.jinja" import server with context %}

local {{ server.bind.address }}
port {{ server.bind.port }}

# TCP or UDP server?
proto {{ server.bind.get('protocol', 'udp') }}

{%- if server.get('auth', False) %}
plugin /usr/lib64/openvpn/plugins/openvpn-plugin-auth-pam.so openvpn
client-cert-not-required
{%- endif %}

# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
dev {{ server.get('device', 'tun') }}

# SSL
ca {{ server.ssl.ca_group.get('file', '/etc/openvpn/ssl/ca.crt') }}
cert {{ server.ssl.cert_group.get('file', '/etc/openvpn/ssl/server.crt') }}
key {{ server.ssl.key_group.get('file', '/etc/openvpn/ssl/server.key') }}
dh /etc/openvpn/ssl/dh2048.pem
{%- if server.ssl.crl_group.get('enabled', False) %}
crl-verify {{ server.ssl.crl_group.get('file', '/etc/openvpn/ssl/crl.pem') }}
{%- endif %}


{%- if server.get('topology', 'subnet') == 'subnet' %}
{% include "openvpn/files/_subnet.conf" %}
{%- elif server.topology == 'gateway' %}
{% include "openvpn/files/_gateway.conf" %}
{%- endif %}

{%- for route in server.get('routes', []) %}
push "route {{ route.network }} {{ route.netmask }}"
{%- endfor %}

# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
{%- if server.get("client_to_client", False) %}
client-to-client
{%- else %}
;client-to-client
{%- endif %}

# Uncomment this directive if multiple clients
# might connect with the same certificate/key
# files or common names.  This is recommended
# only for testing purposes.  For production use,
# each client should have its own certificate/key
# pair.
#
# IF YOU HAVE NOT GENERATED INDIVIDUAL
# CERTIFICATE/KEY PAIRS FOR EACH CLIENT,
# EACH HAVING ITS OWN UNIQUE "COMMON NAME",
# UNCOMMENT THIS LINE OUT.
{%- if server.get("duplicate_cn", False) %}
duplicate-cn
{%- else %}
;duplicate-cn
{%- endif %}

# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
keepalive 10 60
inactive 600

# For extra security beyond that provided
# by SSL/TLS, create an "HMAC firewall"
# to help block DoS attacks and UDP port flooding.
#
# Generate with:
#   openvpn --genkey --secret ta.key
#
# The server and each client must have
# a copy of this key.
# The second parameter should be '0'
# on the server and '1' on the clients.
{%- if server.get('tls_auth', False) %}
tls-auth ta.key 0
{%- else %}
;tls-auth ta.key 0
{%- endif %}

{%- if server.get('compression', True) %}
compress lz4-v2
push "compress lz4-v2"
{%- else %}
;compress lz4-v2
;push "compress lz4-v2"
{%- endif %}

{%- if server.get('max_clients', False) %}
max-clients {{ server.max_clients }}
{%- endif %}
user nobody
group nogroup

persist-key
persist-tun

;status openvpn-status.log
;log         openvpn.log
;log-append  openvpn.log

verb {{ server.get('verbosity', 3) }}
;mute 20

{#-
    vim: syntax=jinja
-#}
